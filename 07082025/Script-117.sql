--ListExpectedArticlesForBagClosingMO  
explain analyse SELECT DISTINCT      ais.article_weight AS ArticleWeight,     boc.article_number AS ArticleNumber,     boc.article_type AS ArticleType,     art_status AS ArtStatus,     ais.booking_office_name AS BookingOfficeName,     ais.destn_office_pin AS DestnOfficePin,     boc.insured_flag AS InsuredFlag,     false AS BulkDelStatus,     kar.is_recall AS Recall,     kar.is_return AS Return,     ais.booking_reference_id AS BookingReferenceID  FROM bagmgmt.bag_open_content boc  LEFT JOIN bagmgmt.article_induction_stg ais      ON boc.article_number = ais.article_number  LEFT JOIN bagmgmt.kafka_article_recall_return kar      ON boc.article_number = kar.article_number  LEFT JOIN (     SELECT          article_number,          MAX(art_stg_date) AS max_art_status_date     FROM bagmgmt.article_induction_stg     GROUP BY article_number ) AS max_ais      ON ais.article_number = max_ais.article_number      AND ais.art_stg_date = max_ais.max_art_status_date  WHERE      boc.set_date BETWEEN CURRENT_DATE - INTERVAL '7 DAYS' AND CURRENT_DATE     AND boc.bag_number IN (         SELECT bag_number          FROM bagmgmt.bag_event          WHERE              to_office_id = 21380006             AND set_date = '2025-07-27'             AND set_number = 'SET1'     )     AND art_status IN ('O','R')     AND boc.set_number = '2025-07-27'     AND boc.article_type = ANY (         SELECT UNNEST(article_type)         FROM bagmgmt.bag_master         WHERE bag_type = 'SP'     )     AND (         (ais.destn_office_pin BETWEEN 572101 AND 561202)         OR          (ais.destn_office_pin BETWEEN 563999 AND 563999)     );

CREATE INDEX idx_article_stg_number_date ON bagmgmt.article_induction_stg (article_number, art_stg_date DESC);   CREATE INDEX idx_bag_event_target ON bagmgmt.bag_event (bag_number, to_office_id, set_date, set_number);   CREATE INDEX idx_boc_bag_number ON bagmgmt.bag_open_content (bag_number);  CREATE INDEX idx_boc_article_number ON bagmgmt.bag_open_content (article_number); CREATE INDEX idx_kar_article_number ON bagmgmt.kafka_article_recall_return (article_number);

WITH latest_article_status AS (     SELECT DISTINCT ON (article_number)         article_number,         article_weight,         booking_office_name,         destn_office_pin,         booking_reference_id,         art_status,         art_stg_date     FROM bagmgmt.article_induction_stg     ORDER BY article_number, art_stg_date DESC ), valid_bag_numbers AS (     SELECT bag_number     FROM bagmgmt.bag_event     WHERE         to_office_id = 21380006         AND set_date = DATE '2025-07-27'         AND set_number = 'SET1' ), valid_article_types AS (     SELECT UNNEST(article_type) AS article_type     FROM bagmgmt.bag_master     WHERE bag_type = 'SP' )  SELECT     las.article_weight AS ArticleWeight,     boc.article_number AS ArticleNumber,     boc.article_type AS ArticleType,     las.art_status AS ArtStatus,     las.booking_office_name AS BookingOfficeName,     las.destn_office_pin AS DestnOfficePin,     boc.insured_flag AS InsuredFlag,     false AS BulkDelStatus,     kar.is_recall AS Recall,     kar.is_return AS Return,     las.booking_reference_id AS BookingReferenceID FROM bagmgmt.bag_open_content boc LEFT JOIN latest_article_status las ON boc.article_number = las.article_number LEFT JOIN bagmgmt.kafka_article_recall_return kar ON boc.article_number = kar.article_number WHERE     boc.set_date BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE     AND boc.bag_number IN (SELECT bag_number FROM valid_bag_numbers)     AND las.art_status IN ('O', 'R')     AND boc.set_number = '2025-07-27'     AND boc.article_type IN (SELECT article_type FROM valid_article_types)     AND (         las.destn_office_pin BETWEEN 561202 AND 572101         OR las.destn_office_pin = 563999     );


SELECT DISTINCT      boc.article_number AS ArticleNumber,     ais.booking_office_id AS BookingOfficeID,     ais.booking_office_name AS BookingOfficeName,     boc.article_type AS ArticleType,     ais.booking_office_pin AS BookingOfficePIN,     ais.destn_office_pin AS DestinationOfficePIN,     ais.booking_date AS BookingDatetime,     ais.article_weight AS ArticleWeight,     boc.insured_flag AS InsuredFlag,     'BOA' AS InductionChannel,     boc.booking_reference_id AS BookingID,     NULL::BIGINT AS BulkCustomerID FROM      bagmgmt.bag_open_content boc LEFT JOIN LATERAL (     SELECT *     FROM bagmgmt.article_induction_stg ais     WHERE ais.article_number = boc.article_number       AND ais.art_stg_date >= '2025-07-23 00:00:00'  -- Replace with actual 4-day cutoff     ORDER BY ais.art_stg_date DESC     LIMIT 1 ) AS ais ON TRUE WHERE      boc.bag_number IN (         SELECT bag_number         FROM bagmgmt.bag_event         WHERE              bag_type = 'BO'             AND event_type = 'OP'             AND to_office_id = 23260016             AND set_number = 'SET1'     )     AND boc.art_status = 'O'     AND NOT (         ais.article_status = 'BKG'          OR (ais.article_status = 'CLS' AND ais.induction_channel_id IS DISTINCT FROM 'CSI')     )     AND (         ais.art_stg_date IS NULL          OR ais.art_stg_date >= '2025-07-23 00:00:00'  -- Replace with actual cutoff again if needed     )     AND boc.set_date BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE;


 md_created_date BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE